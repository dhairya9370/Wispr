<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WhatsApp Web - Light Mode</title>
    <script src="https://unpkg.com/@phosphor-icons/web"></script>
    <link rel="stylesheet" href="/home.css">
</head>

<body>
    <div class="top-bar">
        <div class="left">
            <img src="/WisprLogo.png">
            <span>Wispr</span>
        </div>
        <div class="right">
            <i class="ph ph-minus"></i>
            <i class="ph ph-square"></i>
            <i class="ph ph-x"></i>
        </div>
    </div>
    <div class="sidebar">
        <div class="icon-container">
            <div class="icon icons"><i class="ph ph-chat-circle"></i></div>
            <div class="icon icons"><i class="ph ph-phone"></i></div>
            <div class="icon icons"><i class="ph ph-circle-notch"></i></div>
            <hr>
            <div class="ai">
                <img src="https://thetechportal.com/wp-content/uploads/2024/06/images-2.jpg">
            </div>
        </div>
        <div class="icon-container">
            <div class="icon icons"><i class="ph ph-circle"></i></div>
            <hr>
            <div class="icon icons"><i id="gear" class="ph ph-gear"></i></div>
            <div id="profile-div-container">
                <div id="profile-image"  title="Profile"></div>
            
            </div>
            <div id="btId" style="display:none;">
                <%=btId%>
            </div>
        </div>
    </div>
    <div class="container">
        <div class="pane" id="chat-container">
            <div id="heading">CHATS</div>
            <div id="searchbar">
                <i class="ph ph-magnifying-glass"></i>
                <input type="text" id="search" placeholder="Search or start a new chat">

            </div>
            <div id="chat-list">
                <% chats.sort((a, b) => new Date(b.at) - new Date(a.at));
                let uniqueReceivers=new Set(); %>
                <% for (chat of chats) { %>
                    <% if (!uniqueReceivers.has(chat.to_id)) { %>
                        <% if (btId !=chat.to_id) { %>
                            <% uniqueReceivers.add(chat.to_id); %>
                            <div class="chatbox">
                                <div id="DPblock">
                                    <div class="photo"><img src="/defaultDP.jpg"></div>
                                </div>
                                <div id="block2">
                                    <div id="block2-1">
                                        <p id="to_id"><%= chat.to_id %></p>
                                        <div id="name"><%= chat.to %></div>
                                        <div id="time"></div>
                                    </div>
                                    <div id="block2-2">
                                        <div id="recent-chat"></div>
                                    </div>
                                </div>
                            </div>
                        <% } %>
                    <% } %>
                    <% if (!uniqueReceivers.has(chat.from_id)) { %>
                        <% if (btId !=chat.from_id) { %>
                        <% uniqueReceivers.add(chat.from_id); %>
                            <div class="chatbox">
                                <div id="DPblock">
                                    <div class="photo"><img src="/defaultDP.jpg"></div>
                                </div>
                                <div id="block2">
                                    <div id="block2-1">
                                        <p id="to_id"><%= chat.from_id %></p>
                                        <div id="name"><%= chat.from %></div>
                                        <div id="time"></div>
                                    </div>
                                    <div id="block2-2">
                                        <div id="recent-chat"></div>
                                    </div>
                                </div>
                            </div>
                        <% } %>
                    <% } %>
                <% } %>
            </div>
            <div id="searched-list" class="empty"></div>
        </div>
        <div class="resizer" id="resizer"></div>
        <div class="pane" id="chat-window">
            <div id="empty-chat-window-container">
                <div id="empty-chat-window">
                    <br><br><br>
                    <img src="/darkWhatsappLogo.jpg"><br>
                    <p>Wispr for Desktop</p>
                    <p style="opacity:0.6">Send and recieve messages without keeping your phone online.</p>
                    <p style="opacity:0.6"> Use Wispr on all linked devices.</p>
                </div>
                <p class="encryption" style="opacity:0.6"><i class="ph ph-lock"></i> End-to-end encrypted</p>
            </div>
            <div class="chatting-container">
                <!-- Chat Header -->
                <div class="chat-header">
                    <div id="user-info-container">
                        <img src="/defaultDP.jpg" alt="User" class="profile-pic">
                        <div class="user-info">
                            <div id="receiver-id" style="display:none;"></div>
                            <h3 id="receiver-name"></h3>
                            <p id="receiver-status">offline</p>
                        </div>
                    </div>
                    <div class="chat-icons">
                        <i class="ph ph-phone"></i>
                        <i class="ph ph-video-camera"></i>
                        <i class="ph ph-dots-three-vertical"></i>
                    </div>
                </div>
                <!-- Chat Messages -->
                <div class="chatting-messages-box" id="chatBox">
                    <div id="timestamp">2-04-2025</div>
                    <!-- <div class="message received"></div>
                        <div class="message sent"></div> -->
                </div>
                <!-- Message Input -->
                <div id="chat-input">
                    <div id="emojiBtn" onclick="toggleEmojiPicker()">
                        <i class="ph ph-smiley"></i>
                    </div>
                    <div id="emojiDropdown" class="emoji-dropdown">
                        <span onclick="addEmoji('üòÄ');">üòÄ</span>
                        <span onclick="addEmoji('üòÇ')">üòÇ</span>
                        <span onclick="addEmoji('üòç')">üòç</span>
                        <span onclick="addEmoji('üòé')">üòé</span>
                        <span onclick="addEmoji('ü§î')">ü§î</span>
                        <span onclick="addEmoji('üî•')">üî•</span>
                        <span onclick="addEmoji('üíñ')">üíñ</span>
                        <span onclick="addEmoji('üöÄ')">üöÄ</span>
                        <span onclick="addEmoji('üéâ')">üéâ</span>
                        <span onclick="addEmoji('ü•≥')">ü•≥</span>
                        <span onclick="addEmoji('üëÄ')">üëÄ</span>
                        <span onclick="addEmoji('üëç')">üëç</span>
                    </div>
                    <input type="text" id="messageInput" placeholder="Type a message...">
                    <button id="sendBtn">‚û§</button>
                    <div id="voiceBtn">
                        <i class="ph ph-microphone"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script src="/socket.io/socket.io.js"></script>
    <script >
        let newId='<%=btId%>';
        let chatBoxes= document.querySelectorAll(".chatbox");
        const socket = io("http://localhost:3000");
        socket.emit("userOnline",newId);
        let onlineUsers=[];
        socket.on("updateOnlineStatus", (onlineIds) => {
            // console.log(onlineIds);
            onlineUsers=onlineIds;
            checkConnection();
        });

        // socket.off("userOnline");
        // socket.emit("newUserOnline",newId);
        //sidebar
        let btns = document.querySelectorAll(".icons");
        let gear = document.getElementById("gear");
        btns.forEach((btn, index) => {
            btn.addEventListener("click", () => {
                btns.forEach(b => b.classList.remove("active"));
                btn.classList.add("active");

                if (index !== 4) {
                    gear.style.transform = "rotate(-45deg)";
                }
            });

            btn.addEventListener("mouseover", () => {
                // Placeholder for hover functionality
            });
        });
        btns[0].click();
        gear.addEventListener("click", () => {
            gear.style.transform = gear.style.transform === "rotate(45deg)" ? "rotate(0deg)" : "rotate(45deg)";
        });


        //profile button

        //resizer
        const resizer = document.getElementById("resizer");
        const chat_container = document.getElementById("chat-container");
        const chat_window = document.getElementById("chat-window");
        let isResizing = false;
        function onMouseMove(event) {
            if (!isResizing) return;
            let containerWidth = document.body.clientWidth - 60; // Adjust for sidebar width
            let newWidth = event.clientX - 60; // Adjust for sidebar offset
            if (newWidth > 100 && newWidth < containerWidth - 100) { // Prevent extreme resizing
                chat_container.style.flex = `0 0 ${newWidth}px`;
                chat_window.style.flex = `1`;
            }
        }
        resizer.addEventListener("mousedown", (event) => {
            isResizing = true;
            document.addEventListener("mousemove", onMouseMove);
            document.addEventListener("mouseup", () => {
                isResizing = false;
                document.removeEventListener("mousemove", onMouseMove);
            });
        });
        
        //search algorithm
        let chatList=document.querySelector("#chat-list");
        let searchListDiv=document.querySelector("#searched-list");
        let allIds_names=[];
        allIds_names=JSON.parse('<%- ids_names %>');
        let search = document.querySelector("#search");

        search.addEventListener("input",async ()=>{
            searchListDiv.innerHTML="";
            searchListDiv.classList.add("active");
            chatList.classList.add("inactive");
            if(search.value.toString().trim()!=""){
                if(searchListDiv.classList.contains("empty")){
                    searchListDiv.classList.remove("empty");
                    searchListDiv.classList.add("filled");}
                for(user of allIds_names){
                    if(user["btId"]!=newId && (user["name"].toLowerCase().includes(search.value.trim().toString().toLowerCase()) || user["btId"].toLowerCase().includes(search.value.trim().toString().toLowerCase()))){
                        searchListDiv.innerHTML+=`<div class="chatbox searched">
                            <div id="DPblock">
                                <div class="photo"><img src="/defaultDP.jpg"></div>
                            </div>
                            <div id="block2">
                                <div id="block2-1">
                                    <div id="name">${user["name"]}</div>
                                </div>
                                <div id="block2-2">
                                    <div id="searched_id"> ${user["btId"].toUpperCase()}</div>
                                </div>
                            </div>
                        </div>`;
                        await document.querySelectorAll(".searched").forEach((box)=>{

                        box.addEventListener("mouseover", function () {
                            this.style.background = "#e9ecef"; // Light gray on hover
                        });

                        box.addEventListener("mouseout", function () {
                            this.style.background = ""; // Reset background on hover out
                        });

                        box.addEventListener("mousedown", function () {
                            this.style.background = "#d6d8db";
                        
                        });

                        box.addEventListener("mouseup", function () {
                            this.style.background = "#e9ecef"; // Back to hover color after release
                        });

                        box.addEventListener("click", async ()=>{
                            let name=box.querySelector("#name").innerText.toString().trim();
                            let toId=box.querySelector("#searched_id").innerText.toString().trim().toLowerCase();
                            let newChatBox=document.createElement("div");
                            newChatBox.innerHTML=`<div class="chatbox">
                                            <div id="DPblock">
                                                <div class="photo"><img src="/defaultDP.jpg"></div>
                                            </div>
                                            <div id="block2">
                                                <div id="block2-1">
                                                    <p id="to_id">${toId}</p>
                                                    <div id="name">${name}</div>
                                                    <div id="time"></div>
                                                </div>
                                                <div id="block2-2">
                                                    <div id="recent-chat"></div>
                                                </div>
                                            </div>
                                        </div>`;
                                        active_receiver_id=toId;


                                        let present=false;let presentAtIdx;
                                        for(i=0;i<chatBoxes.length;i++){
                                               if(chatBoxes[i].children.block2.children[0].children[0].innerText.trim() == toId){
                                                presentAtIdx=i;
                                                present=true;
                                                break;
                                               }
                                        }
                        if(!present){
                            
                            chatBoxes= document.querySelectorAll(".chatbox");//reload chatboxes
                            closeSearchList();
                            chatList.appendChild(newChatBox);
                            await activateChatBoxes();
                            
                            let lastChatBox = chatBoxes[chatBoxes.length-1];
                            // console.log(chatBoxes[2]);
                            lastChatBox.click();//not working
                            // await insertChatMsgs(toId,name);
                        }else{
                            let alreadyPresent = chatBoxes[presentAtIdx];
                            alreadyPresent.click();
                        }
                            // newChatBox.click();
                        });
                    });
                    }
                }
                if(searchListDiv.innerHTML.toString().trim()==""){
                    searchListDiv.classList.remove("filled");
                    searchListDiv.classList.add("empty");
                }
            }else{
                if(searchListDiv.classList.contains("filled")){
                    searchListDiv.classList.remove("filled");
                    searchListDiv.classList.add("empty");
                }
            }


        });
        document.addEventListener("click",(event)=>{
            // console.log(event.target);
            if(((searchListDiv.classList.contains("empty") && searchListDiv.contains(event.target)) || (!searchListDiv.classList.contains("filled") || !searchListDiv.contains(event.target))) && !search.contains(event.target) && chatList.classList.contains("inactive") && searchListDiv.classList.contains("active")){
                closeSearchList();
            }
        });
        function closeSearchList(){
                searchListDiv.classList.remove("active");
                searchListDiv.classList.remove("filled");
                chatList.classList.remove("inactive");
                search.value="";
                searchListDiv.innerHTML="";
            }
            

            //debugging

            //if()
        
        let chatContainer = document.querySelector(".chatting-container");
        chatContainer.style.display = "none";//empty
        let emptyContainer = document.querySelector("#empty-chat-window-container");
        let receiver_name = document.querySelector("#receiver-name");
        let receiver_id = document.querySelector("#receiver-id");
        let receiver_status = document.querySelector("#receiver-status");
        let sortedMsgs = [];
        let loggedIn=JSON.parse('<%-Id%>');
        let active_receiver_id="";

        async function sortChats() {
            if(active_receiver_id!=""){
            const response = await fetch("/api/getAllMessages", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ chats_with: active_receiver_id.trim() , loggedIn:loggedIn }),
            });
            const result = await response.json();
            // console.log(result.received,result.sent);
            let receivedMsgsObj = result.received;
            let sentMsgsObj = result.sent;
            let receivedUnsorted = [];
            for (msg of receivedMsgsObj) {
                if (msg.from_id == active_receiver_id) {
                    let p = document.createElement("p");
                    p.innerText = msg.message;
                    let time = document.createElement("div");
                    time.className = "chattingbox-chat-time";
                    time.innerText = msg.at;
                    let message = document.createElement("div");
                    message.className = "message received";
                    message.appendChild(p);
                    message.appendChild(time);
                    receivedUnsorted.push(message);

                }
            }
            let sentUnsorted = [];
            for (msg of sentMsgsObj) {
                if (msg.to_id == active_receiver_id) {
                    let p = document.createElement("p");
                    p.innerText = msg.message;
                    let time = document.createElement("div");
                    time.className = "chattingbox-chat-time";
                    time.innerText = msg.at;
                    let message = document.createElement("div");
                    message.className = "message sent";
                    message.appendChild(p);
                    message.appendChild(time);
                    sentUnsorted.push(message);

                }
            }
            let unsorted = receivedUnsorted.concat(sentUnsorted);
            // console.log(unsorted);
            sortedMsgs = await unsorted.sort((a, b) => {
                let timeA = new Date(a.querySelector(".chattingbox-chat-time").textContent.trim());
                let timeB = new Date(b.querySelector(".chattingbox-chat-time").textContent.trim());
                return timeA - timeB;
            });
           
            return sortedMsgs;
        }}

        //recent chat, recent chat time, for chat list's chat boxes
        function formatTimestamp(dateString) {
            const inputDate = new Date(dateString);
            const currentDate = new Date();

            const inputDay = inputDate.getDate();
            const inputMonth = inputDate.getMonth();
            const inputYear = inputDate.getFullYear();

            const todayDay = currentDate.getDate();
            const todayMonth = currentDate.getMonth();
            const todayYear = currentDate.getFullYear();

            // Check if it's today
            if (
                inputDay === todayDay &&
                inputMonth === todayMonth &&
                inputYear === todayYear
            ) {
                // Convert to 12-hour format
                let hours = inputDate.getHours();
                let minutes = inputDate.getMinutes();
                let ampm = hours >= 12 ? 'PM' : 'AM';

                hours = hours % 12;
                hours = hours ? hours : 12; // 0 => 12
                minutes = minutes < 10 ? '0' + minutes : minutes;

                return `${hours}:${minutes} ${ampm}`;
            }

            // Check if it's yesterday
            const yesterdayDate = new Date();
            yesterdayDate.setDate(todayDay - 1);

            if (
                inputDay === yesterdayDate.getDate() &&
                inputMonth === yesterdayDate.getMonth() &&
                inputYear === yesterdayDate.getFullYear()
            ) {
                return 'Yesterday';
            }

            // Else, return DD-MM-YYYY
            const day = inputDay < 10 ? '0' + inputDay : inputDay;
            const month = inputMonth + 1 < 10 ? '0' + (inputMonth + 1) : (inputMonth + 1);

            return `${day}-${month}-${inputYear}`;
        }

        function addTimeStampsInChats(dateString) {
            dateString = dateString.toString();
            const inputDate = new Date(dateString);
            const currentDate = new Date();

            // Extract hours and minutes for 12-hour format
            let hours = inputDate.getHours();
            let minutes = inputDate.getMinutes();
            let ampm = hours >= 12 ? 'PM' : 'AM';

            hours = hours % 12 || 12; // Convert 0 to 12
            minutes = minutes.toString().padStart(2, '0'); // Ensure two-digit minutes

            let time = `${hours}:${minutes} ${ampm}`;

            // Extract date parts
            const inputDay = inputDate.getDate();
            const inputMonth = inputDate.getMonth() + 1; // Months are 0-indexed
            const inputYear = inputDate.getFullYear();

            const today = currentDate.getDate();
            const thisMonth = currentDate.getMonth() + 1;
            const thisYear = currentDate.getFullYear();

            // Check if the date is Today
            if (inputDay === today && inputMonth === thisMonth && inputYear === thisYear) {
                return { time, date: "Today" };
            }

            // Check if the date is Yesterday
            const yesterday = new Date();
            yesterday.setDate(today - 1);

            if (
                inputDay === yesterday.getDate() &&
                inputMonth === yesterday.getMonth() + 1 &&
                inputYear === yesterday.getFullYear()
            ) {
                return { time, date: "Yesterday" };
            }

            // Otherwise, return in DD-MM-YYYY format
            let date = `${String(inputDay).padStart(2, '0')}-${String(inputMonth).padStart(2, '0')}-${inputYear}`;

            return { time, date };

        };

        // //fetch latest
        async function fetch_latest() {
            for (receiver of chatBoxes) {
               
                active_receiver_id=receiver.childNodes[3].childNodes[1].childNodes[1].innerText.trim().toLowerCase();
                let sorted = await sortChats();
                // console.log(sorted[sorted.length-1].classList[1]);
                
                let time =sorted[sorted.length - 1].children[1].innerText.trim().toString();
                // console.log(time);
                receiver.querySelector("#time").innerText = formatTimestamp(time);

                if (sorted[sorted.length - 1].classList[1].toString() == "sent") {
                    receiver.querySelector("#recent-chat").innerText = "You: " + sorted[sorted.length - 1].children[0].innerText.toString();
                } else {
                    receiver.querySelector("#recent-chat").innerText = sorted[sorted.length - 1].children[0].innerText.toString();
                }
            }
            active_receiver_id="";
        };
        document.addEventListener("DOMContentLoaded", async() => {
            await fetch_latest();
            await activateChatBoxes();
        });

        //when a user is chatting with any online receiver,
        //  and if he goes offline, then udate the receiver status dynamically
        function checkConnection(){
            if(!onlineUsers.includes(active_receiver_id) && receiver_status.innerText.trim()=="online"){
                receiver_status.innerText = "offline";
            }
            else if(onlineUsers.includes(active_receiver_id) && receiver_status.innerText=="offline"){
                receiver_status.innerText = "online";
            }
        }
        
        async function insertChatMsgs(receiver_id,receiver_name){
            if (onlineUsers.includes(receiver_id,receiver_name)) {
                // console.log("updated this chatbox's receiver status")
                receiver_status.innerText = "online";
            }
            else{
                receiver_status.innerText = "offline";
            }

            sortedMsgs = await sortChats();
            //add time stamps
            if(sortedMsgs.length!=0){
            let prev = addTimeStampsInChats(sortedMsgs[sortedMsgs.length - 1].querySelector(".chattingbox-chat-time").textContent.trim().toString()).date;
            for (i = sortedMsgs.length - 1; i >= 0; i--) {
                let present = addTimeStampsInChats(sortedMsgs[i].querySelector(".chattingbox-chat-time").textContent.trim().toString()).date;
                if (prev == present) {//move up
                    if (i == 0) {
                        //insert at index '0'
                        sortedMsgs[i].querySelector(".chattingbox-chat-time").innerText = addTimeStampsInChats(sortedMsgs[i].querySelector(".chattingbox-chat-time").textContent.trim()).time;
                        let date = document.createElement("div");
                        date.className = "messageTimeStamp";
                        date.innerText = prev;
                        sortedMsgs.splice(0, 0, date);
                        break;
                    }
                }
                else {
                    let date = document.createElement("div");
                    date.className = "messageTimeStamp";
                    date.innerText = prev;
                    prev = present;
                    sortedMsgs.splice(i + 1, 0, date);
                
                }
                sortedMsgs[i].querySelector(".chattingbox-chat-time").innerText = addTimeStampsInChats(sortedMsgs[i].querySelector(".chattingbox-chat-time").textContent.trim()).time;
            
            }}
            let chatBox = document.querySelector("#chatBox");
            chatBox.innerHTML = "";
            await sortedMsgs.forEach(msg => chatBox.appendChild(msg));
            emptyContainer.style.display = "none";
            chatContainer.style.display = "flex";
            await chatBox.scrollTo({ top: chatBox.scrollHeight });
            //end
            }
        
        async function activateChatBoxes(){
        chatBoxes.forEach(chatbox => {
            chatbox.addEventListener("mouseover", function () {
                this.style.background = "#e9ecef"; // Light gray on hover
            });

            chatbox.addEventListener("mouseout", function () {
                this.style.background = ""; // Reset background on hover out
            });

            chatbox.addEventListener("mousedown", function () {
                this.style.background = "#d6d8db";

            });

            chatbox.addEventListener("mouseup", function () {
                this.style.background = "#e9ecef"; // Back to hover color after release
            });

            chatbox.addEventListener("click", async function () {
                console.log("clicked chatbox");
                receiver_name.innerText = this.children.block2.children["block2-1"].children[1].innerText.trim();
                receiver_id.innerText = this.children.block2.children["block2-1"].children[0].innerText.trim().toLowerCase();
                active_receiver_id= receiver_id.innerText;
                await insertChatMsgs(receiver_id.innerText,receiver_name.innerText);
                


            });
        });
        }
        function toggleEmojiPicker() {
            let dropdown = document.getElementById("emojiDropdown");
            dropdown.style.display = (dropdown.style.display === "block") ? "none" : "block";
        }
        function addEmoji(emoji) {
            let inputField = document.getElementById("messageInput");
            inputField.value += emoji; // Emoji append karega
            inputField.focus(); // Input field active karega
            inputField.dispatchEvent(new Event("input", { bubbles: true })); // Send button toggle karega

            let emojiDropdown = document.getElementById("emojiDropdown");
            if (emojiDropdown.style.display !== "none") {
                emojiDropdown.style.display = "none"; // Dropdown close karega
            }
        }
        let messageInput = document.querySelector("#messageInput");
        let sendBtn = document.querySelector("#sendBtn");
        let voiceBtn = document.querySelector("#voiceBtn");
        sendBtn.style.display = "none";
        messageInput.addEventListener("input", function () {
            if (messageInput.value.trim() !== "") {
                sendBtn.style.display = "inline"; // Send button show
                voiceBtn.style.display = "none";
            } else {
                sendBtn.style.display = "none";
                voiceBtn.style.display = "inline";
            }
        });

        // let BTID = JSON.parse('<%- Id %>');
        loggedIn = loggedIn.toString();
        sendBtn.addEventListener("click", async () => {
            const message = messageInput.value.trim(); // Trim whitespace

            if (!message) {
                console.error("Message is empty!"); // Debugging output
                return; // Stop if the message is empty
            }

            try {
                const toId = document.querySelector("#receiver-id").textContent.trim();
                const fromId = loggedIn;
                const response = await fetch("/api/sendMessage", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ from_id: fromId, message, to_id: toId }), // Send the message and to_id
                });
                const result = await response.json();
                if(onlineUsers.includes(toId)){
                    //display dynamically the message in the online receiver's chatbox
                    socket.emit("sendMessage",{fromId:fromId,msg:message,toId:toId,at:result.message.at});
                };
                // await console.log(result.message.message);
                let chatBox = document.querySelector("#chatBox");
                let p = document.createElement("p");
                p.innerText = result.message.message;
                let time = document.createElement("div");
                time.className = "chattingbox-chat-time";

                time.innerText = addTimeStampsInChats(result.message.at).time;

                let msg = document.createElement("div");
                msg.className = "message sent";
                msg.appendChild(p);
                msg.appendChild(time);
                if (sortedMsgs.length!=0 && addTimeStampsInChats(sortedMsgs[sortedMsgs.length - 1].querySelector(".chattingbox-chat-time").innerText).date != addTimeStampsInChats(result.message.at).date) {
                

                    for (i = 0; i < chatBoxes.length; i++) {
                        if (chatBoxes[i].children.block2.children[0].children[0].innerText.trim() == toId) {
                            // console.log(chatBoxes[i].children.block2.children[0].children[0].innerText);
                            chatBoxes[i].click(); break;
                        }
                    }
                }
                else {
                    chatBox.appendChild(msg);//on sender's system
                    chatBox.scrollTo({ top: chatBox.scrollHeight, behavior: "smooth" });
                } messageInput.value = ""; messageInput.dispatchEvent(new Event('input'));


            } catch (error) {
                console.error("Error sending message:", error); // Debugging output
            }
        });

        messageInput.addEventListener("keypress", function (event) {
            if (event.key === "Enter" && messageInput.value != "") {// Prevent form submission (if inside a form)
                document.getElementById("sendBtn").click(); // Trigger button click
            }
        });
        
        socket.on("receiveMessage", async ({msg,fromId,at})=>{
            if(fromId==active_receiver_id){
                // console.log("received message :",msg,"fromId: ",fromId,"at:",at);
                let p = document.createElement("p");
                p.innerText = msg.toString();
                let time = document.createElement("div");
                time.className = "chattingbox-chat-time";
                time.innerText =addTimeStampsInChats(at).time;
                let message = document.createElement("div");
                message.className = "message received";
                message.appendChild(p);
                message.appendChild(time);

                if (addTimeStampsInChats(sortedMsgs[sortedMsgs.length - 1].querySelector(".chattingbox-chat-time").innerText).date != addTimeStampsInChats(at).date) {
                
                    for (i = 0; i < chatBoxes.length; i++) {
                        if (chatBoxes[i].children.block2.children[0].children[0].innerText.trim() == fromId) {
                            console.log(chatBoxes[i].children.block2.children[0].children[0].innerText);
                            await chatBoxes[i].click();
                            console.log("dynamically clicked chatBox"); 
                            break;
                        }
                    }
                }
                else{
                chatBox.appendChild(message);
                chatBox.scrollTo({ top: chatBox.scrollHeight, behavior: "smooth" });
                }
            }
        });

    </script>
</body>
</html>
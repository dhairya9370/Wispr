<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WhatsApp Web - Light Mode</title>
    <script src="https://unpkg.com/@phosphor-icons/web"></script>
    <link rel="stylesheet" href="/home.css">
    <!-- Bootstrap 5 CSS -->
<!-- <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"> -->

</head>
<body>
    <div class="top-bar">
        <div class="left">
            <img src="/WisprLogo.png">
            <span>Wispr</span>
        </div>
        <div class="right">
            <i class="ph ph-minus"></i><!--tab minimizing button -->
            <i class="ph ph-square"></i><!--tab resize btn-->
            <i class="ph ph-x"></i><!--tab close button-->
        </div>
    </div>
    <div class="sidebar">
        <div class="icon-container">
            <div class="icon icons"><i class="ph ph-chat-circle"></i></div><!--chats section btn-->
            <div class="icon icons"><i class="ph ph-phone"></i></div><!--calls section btn-->
            <div class="icon icons"><i class="ph ph-circle-notch"></i></div><!--status section btn-->
            <hr>
            <div class="ai">
                <img src="https://thetechportal.com/wp-content/uploads/2024/06/images-2.jpg"><!--meta AI button-->
            </div>
        </div>
        <div class="icon-container">
            <div class="icon icons"><i class="ph ph-circle"></i></div><!--dummy icon-->
            <hr>
            <div class="icon icons"><i id="gear" class="ph ph-gear"></i></div><!--settings section btn-->
            <div id="profile-div-container"><!--profile section btn-->
                <div id="profile-image"  title="Profile"></div>
            </div>
            <div id="btId" style="display:none;"><!--hidden loggedIn's btId-->
                <%=btId%>
            </div>
        </div>
    </div>
    <!--Chats section Container-->
    <div class="container w-100 mx-0">
        <!-- receiver's chatboxes list -->
        <div class="pane" id="chat-container">
            <div id="heading">CHATS</div>
            <div id="searchbar">
                <i class="ph ph-magnifying-glass"></i>
                <input type="text" id="search" placeholder="Search by name or ID">
            </div>

            <div id="chat-list">
                <!-- to sort chatboxes in list as last out first in -->
                <% chats.sort((a, b) => new Date(b.at) - new Date(a.at));
                let uniqueReceivers=new Set(); %><!--to overcome repeated receiver chatboxes even if loggedIn sender has sent multiple messages to a particular receiver-->
                <% for (chat of chats) { %>
                    <% if (!uniqueReceivers.has(chat.to_id)) { %>
                        <% if (btId !=chat.to_id) { %>
                            <% uniqueReceivers.add(chat.to_id); %>
                            <div class="chatbox">
                                <div id="DPblock">
                                    <div class="photo"><img src="/defaultDP.jpg"></div>
                                </div>
                                <div id="block2">
                                    <div id="block2-1">
                                        <p id="to_id"><%= chat.to_id %></p>
                                        <div id="name"><%= chat.to %></div>
                                        <div id="time"></div>
                                    </div>
                                    <div id="block2-2">
                                        <div id="recent-chat"></div>
                                    </div>
                                </div>
                            </div>
                        <% } %>
                    <% } %>
                    <% if (!uniqueReceivers.has(chat.from_id)) { %>
                        <% if (btId !=chat.from_id) { %>
                        <% uniqueReceivers.add(chat.from_id); %>
                            <div class="chatbox">
                                <div id="DPblock">
                                    <div class="photo"><img src="/defaultDP.jpg"></div>
                                </div>
                                <div id="block2">
                                    <div id="block2-1">
                                        <p id="to_id"><%= chat.from_id %></p>
                                        <div id="name"><%= chat.from %></div>
                                        <div id="time"></div>
                                    </div>
                                    <div id="block2-2">
                                        <div id="recent-chat"></div>
                                    </div>
                                </div>
                            </div>
                        <% } %>
                    <% } %>
                <% } %>

            </div>
            <div id="rightClickMenu">
                <div id="deleteForBoth" class="btn-danger">Delete for everyone</div>
            </div>

            <div id="searched-list" class="empty"></div>
        </div>
        <div class="resizer" id="resizer"></div>
        <div class="pane" id="chat-window">
            <div id="empty-chat-window-container">
                <div id="empty-chat-window">
                    <br><br><br>
                    <img src="/WisprLogo.png">
                    
                    <p>Wispr for Desktop</p>
                    <p style="opacity:0.6">Send and recieve messages without your phone number</p>
                    <p style="opacity:0.6"> Use Wispr on all linked devices.</p>
                </div>
                <p class="encryption" style="opacity:0.6"><i class="ph ph-lock"></i> End-to-end encrypted</p>
            </div>
            <div class="chatting-container">
                <!-- Chat Header -->
                <div class="chat-header">
                    <div id="user-info-container">
                        <img src="/defaultDP.jpg" alt="User" class="profile-pic">
                        <div class="user-info">
                            <div id="receiver-id" style="display:none;"></div>
                            <h3 id="receiver-name"></h3>
                            <p id="receiver-status">offline</p>
                        </div>
                    </div>
                    <div class="chat-icons">
                        <i class="ph ph-phone"></i>
                        <i class="ph ph-video-camera"></i>
                        <i class="ph ph-dots-three-vertical"></i>
                    </div>
                </div>
                <!-- Chat Messages -->
                <div class="chatting-messages-box" id="chatBox">
                    <!-- <div id="timestamp"></div> -->
                    <!-- <div class="message received"></div>
                        <div class="message sent"></div> -->
                </div>
                <!-- Message Input -->
                <div id="chat-input">
                    <div id="emojiBtn" onclick="toggleEmojiPicker()">
                        <i class="ph ph-smiley"></i>
                    </div>
                    <div id="emojiDropdown" class="emoji-dropdown">
                        <span onclick="addEmoji('üòÄ');">üòÄ</span>
                        <span onclick="addEmoji('üòÇ')">üòÇ</span>
                        <span onclick="addEmoji('üòç')">üòç</span>
                        <span onclick="addEmoji('üòé')">üòé</span>
                        <span onclick="addEmoji('ü§î')">ü§î</span>
                        <span onclick="addEmoji('üî•')">üî•</span>
                        <span onclick="addEmoji('üíñ')">üíñ</span>
                        <span onclick="addEmoji('üöÄ')">üöÄ</span>
                        <span onclick="addEmoji('üéâ')">üéâ</span>
                        <span onclick="addEmoji('ü•≥')">ü•≥</span>
                        <span onclick="addEmoji('üëÄ')">üëÄ</span>
                        <span onclick="addEmoji('üëç')">üëç</span>
                    </div>
                    <input type="text" id="messageInput" placeholder="Type a message...">
                    <button id="sendBtn">‚û§</button>
                    <div id="voiceBtn">
                        <i class="ph ph-microphone"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <script src="/socket.io/socket.io.js"></script>
    <script >
        
        let loggedIn='<%=btId%>';
        let chatBoxes= document.querySelectorAll(".chatbox");
        const socket = io("http://localhost:3000");
        socket.emit("userOnline",loggedIn);
        let onlineUsers=[];
        socket.on("updateOnlineStatus", (onlineIds) => {
            // console.log(onlineIds);
            onlineUsers=onlineIds;
            checkConnection();
        });
        
        //sidebar
        let btns = document.querySelectorAll(".icons");
        let gear = document.getElementById("gear");
        btns.forEach((btn, index) => {
            btn.addEventListener("click", () => {
                btns.forEach(b => b.classList.remove("active"));
                btn.classList.add("active");

                if (index !== 4) {
                    gear.style.transform = "rotate(-45deg)";
                }
            });

            btn.addEventListener("mouseover", () => {
                // Placeholder for hover functionality
            });
        });
        btns[0].click();
        gear.addEventListener("click", () => {
            gear.style.transform = gear.style.transform === "rotate(45deg)" ? "rotate(0deg)" : "rotate(45deg)";
        });


        //profile button

        //resizer
        const resizer = document.getElementById("resizer");
        const chat_container = document.getElementById("chat-container");
        const chat_window = document.getElementById("chat-window");
        let isResizing = false;
        function onMouseMove(event) {
            if (!isResizing) return;
            let containerWidth = document.body.clientWidth - 60; // Adjust for sidebar width
            let newWidth = event.clientX - 60; // Adjust for sidebar offset
            if (newWidth > 100 && newWidth < containerWidth - 100) { // Prevent extreme resizing
                chat_container.style.flex = `0 0 ${newWidth}px`;
                chat_window.style.flex = `1`;
            }
        }
        resizer.addEventListener("mousedown", (event) => {
            isResizing = true;
            document.addEventListener("mousemove", onMouseMove);
            document.addEventListener("mouseup", () => {
                isResizing = false;
                document.removeEventListener("mousemove", onMouseMove);
            });
        });
        
        //search algorithm
        let chatList=document.querySelector("#chat-list");
        let searchListDiv=document.querySelector("#searched-list");
        let allIds_names=[];
        
        allIds_names=JSON.parse('<%- ids_names %>');
        // allIds_names=='<%= ids_names %>';
        let search = document.querySelector("#search");

        search.addEventListener("input",async ()=>{
            if(searchListDiv.innerHTML.toString().trim()==""){
                    searchListDiv.classList.remove("filled");
                    searchListDiv.classList.add("empty");
                }
            // console.log(searchListDiv.classList);
            searchListDiv.innerHTML="";
            searchListDiv.classList.add("active");
            chatList.classList.add("inactive");
            if(search.value.toString().trim()!=""){
                if(searchListDiv.classList.contains("empty")){
                    searchListDiv.classList.remove("empty");
                    searchListDiv.classList.add("filled");}
                for(user of allIds_names){
                    if(user["btId"]!=loggedIn && (user["name"].toLowerCase().includes(search.value.trim().toString().toLowerCase()) || user["btId"].toLowerCase().includes(search.value.trim().toString().toLowerCase()))){
                        searchListDiv.innerHTML+=`<div class="chatbox searched">
                            <div id="DPblock">
                                <div class="photo"><img src="/defaultDP.jpg"></div>
                            </div>
                            <div id="block2">
                                <div id="block2-1">
                                    <div id="name">${user["name"]}</div>
                                </div>
                                <div id="block2-2">
                                    <div id="searched_id"> ${user["btId"].toUpperCase()}</div>
                                </div>
                            </div>
                        </div>`;
                        // console.log(user);
                        await document.querySelectorAll(".searched").forEach((box)=>{

                        box.addEventListener("mouseover", function () {
                            this.style.background = "#e9ecef"; // Light gray on hover
                        });

                        box.addEventListener("mouseout", function () {
                            this.style.background = ""; // Reset background on hover out
                        });

                        box.addEventListener("mousedown", function () {
                            this.style.background = "#d6d8db";
                        
                        });

                        box.addEventListener("mouseup", function () {
                            this.style.background = "#e9ecef"; // Back to hover color after release
                        });

                        box.addEventListener("click", async ()=>{
                            let name=box.querySelector("#name").innerText.toString().trim();
                            let toId=box.querySelector("#searched_id").innerText.toString().trim().toLowerCase();
                            let newChatBox=document.createElement("div");
                            newChatBox.className="chatbox";
                            newChatBox.innerHTML=`<div id="DPblock">
                                                <div class="photo"><img src="/defaultDP.jpg"></div>
                                            </div>
                                            <div id="block2">
                                                <div id="block2-1">
                                                    <p id="to_id">${toId}</p>
                                                    <div id="name">${name}</div>
                                                    <div id="time"></div>
                                                </div>
                                                <div id="block2-2">
                                                    <div id="recent-chat"></div>
                                                </div>
                                            </div>`;
                        // active_receiver_id=toId;

                        let present=false;let presentAtIdx=0;
                        for(i=0;i<chatBoxes.length;i++){
                            if(chatBoxes[i].children.block2.children[0].children[0].innerText.toLowerCase().trim() == toId){
                             presentAtIdx=i;
                             present=true;
                             break;
                            }
                        }
                        if(!present){
                            // console.log(user,box.classList);
                            chatBoxes= document.querySelectorAll(".chatbox");
                            //reload chatboxes
                            
                            // box.classList.remove("searched");
                            // console.log(chatBoxes,box.classList);//not activated chat box
                            await chatList.appendChild(newChatBox);
                            chatBoxes= document.querySelectorAll(".chatbox");
                            
                            await activateChatBoxes();
                            
                            // console.log(chatBoxes[chatBoxes.length-1]);
                            closeSearchList();
                            
                            let lastChatBox =chatBoxes[chatBoxes.length-1];
                            lastChatBox.remove();//an unnecessary duplicate chatbox for new user was being created, so removed it on the spot
                            // console.log(chatList.children[chatList.children.length-1]);
                            lastChatBox =chatList.children[chatList.children.length-1] ;
                            // console.log(lastChatBox);
                            lastChatBox.click();
                            
                        }else{
                            let alreadyPresent = chatBoxes[presentAtIdx];
                            alreadyPresent.click();
                            // console.log(searchListDiv.classList);
                        }
                        });
                    });
                    }
                }
                // console.log(searchListDiv.innerHTML.toString().trim()=="");
                if(searchListDiv.innerHTML.toString().trim()==""){
                    searchListDiv.classList.remove("filled");
                    searchListDiv.classList.add("empty");
                }
            }else{
                // console.log(searchListDiv.classList.contains("filled"));
                if(searchListDiv.classList.contains("filled")){
                    searchListDiv.classList.remove("filled");
                    searchListDiv.classList.add("empty");
                }
            }

        });
        document.addEventListener("click",(event)=>{
            // console.log(event.target);
            if(((searchListDiv.classList.contains("empty") && searchListDiv.contains(event.target)) || (!searchListDiv.classList.contains("filled") || !searchListDiv.contains(event.target))) && !search.contains(event.target) && chatList.classList.contains("inactive") && searchListDiv.classList.contains("active")){
                closeSearchList();
            }
        });
        function closeSearchList(){
                searchListDiv.classList.remove("active");
                searchListDiv.classList.remove("filled");
                chatList.classList.remove("inactive");
                search.value="";
                searchListDiv.innerHTML="";
            }

        let chatContainer = document.querySelector(".chatting-container");
        chatContainer.style.display = "none";//empty
        let emptyContainer = document.querySelector("#empty-chat-window-container");
        let receiver_name = document.querySelector("#receiver-name");
        let receiver_id = document.querySelector("#receiver-id");
        let receiver_status = document.querySelector("#receiver-status");
        let sortedMsgs = [];
        let messageInput = document.querySelector("#messageInput");
        // console.log(loggedIn);
        let active_receiver_id="";
        let receivedMsgsObj=[];let sentMsgsObj = [];let unsorted =[];
        async function sortChats() {
            if(active_receiver_id!=""){
            const response = await fetch("/api/getAllMessages", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ chats_with: active_receiver_id.trim() , loggedIn:loggedIn }),
            });
            const result = await response.json();
            // console.log(result.received,result.sent);
            receivedMsgsObj = result.received;
            sentMsgsObj = result.sent;
            let receivedUnsorted = [];
            for (msg of receivedMsgsObj) {
                if (msg.from_id == active_receiver_id) {
                    let p = document.createElement("p");
                    p.innerText = msg.message;
                    let time = document.createElement("div");
                    time.className = "chattingbox-chat-time";
                    time.innerText = msg.at;
                    let message = document.createElement("div");
                    message.className = "message received";
                    message.appendChild(p);
                    message.appendChild(time);
                    receivedUnsorted.push(message);

                }
            }
            let sentUnsorted = [];
            for (msg of sentMsgsObj) {
                if (msg.to_id == active_receiver_id) {
                    let p = document.createElement("p");
                    p.innerText = msg.message;
                    let time = document.createElement("div");
                    time.className = "chattingbox-chat-time";
                    time.innerText = msg.at;
                    let message = document.createElement("div");
                    message.className = "message sent";
                    message.appendChild(p);
                    message.appendChild(time);
                    sentUnsorted.push(message);
                }
            }
            unsorted = receivedUnsorted.concat(sentUnsorted);
            // console.log(unsorted);
            sortedMsgs = await unsorted.sort((a, b) => {
                let timeA = new Date(a.querySelector(".chattingbox-chat-time").textContent.trim());
                let timeB = new Date(b.querySelector(".chattingbox-chat-time").textContent.trim());
                return timeA - timeB;
            });
            let sortedWithoutTimeStamps=[];
            if(sortedMsgs.length!=0){
                sortedWithoutTimeStamps = [...sortedMsgs];
                return  [...sortedMsgs];
            }
            else{return [...sortedWithoutTimeStamps];}
        }}

        //recent chat, recent chat time, for chat list's chat boxes
        function formatTimestamp(dateString) {
            const inputDate = new Date(dateString);
            const currentDate = new Date();

            const inputDay = inputDate.getDate();
            const inputMonth = inputDate.getMonth();
            const inputYear = inputDate.getFullYear();

            const todayDay = currentDate.getDate();
            const todayMonth = currentDate.getMonth();
            const todayYear = currentDate.getFullYear();

            // Check if it's today
            if (
                inputDay === todayDay &&
                inputMonth === todayMonth &&
                inputYear === todayYear
            ) {
                // Convert to 12-hour format
                let hours = inputDate.getHours();
                let minutes = inputDate.getMinutes();
                let ampm = hours >= 12 ? 'PM' : 'AM';

                hours = hours % 12;
                hours = hours ? hours : 12; // 0 => 12
                minutes = minutes < 10 ? '0' + minutes : minutes;

                return `${hours}:${minutes} ${ampm}`;
            }

            // Check if it's yesterday
            const yesterdayDate = new Date();
            yesterdayDate.setDate(todayDay - 1);

            if (
                inputDay === yesterdayDate.getDate() &&
                inputMonth === yesterdayDate.getMonth() &&
                inputYear === yesterdayDate.getFullYear()
            ) {
                return 'Yesterday';
            }

            // Else, return DD-MM-YYYY
            const day = inputDay < 10 ? '0' + inputDay : inputDay;
            const month = inputMonth + 1 < 10 ? '0' + (inputMonth + 1) : (inputMonth + 1);

            return `${day}-${month}-${inputYear}`;
        }

        function addTimeStampsInChats(dateString) {
            dateString = dateString.toString();
            const inputDate = new Date(dateString);
            const currentDate = new Date();

            // Extract hours and minutes for 12-hour format
            let hours = inputDate.getHours();
            let minutes = inputDate.getMinutes();
            let ampm = hours >= 12 ? 'PM' : 'AM';

            hours = hours % 12 || 12; // Convert 0 to 12
            minutes = minutes.toString().padStart(2, '0'); // Ensure two-digit minutes

            let time = `${hours}:${minutes} ${ampm}`;

            // Extract date parts
            const inputDay = inputDate.getDate();
            const inputMonth = inputDate.getMonth() + 1; // Months are 0-indexed
            const inputYear = inputDate.getFullYear();

            const today = currentDate.getDate();
            const thisMonth = currentDate.getMonth() + 1;
            const thisYear = currentDate.getFullYear();

            // Check if the date is Today
            if (inputDay === today && inputMonth === thisMonth && inputYear === thisYear) {
                return { time, date: "Today" };
            }

            // Check if the date is Yesterday
            const yesterday = new Date();
            yesterday.setDate(today - 1);

            if (
                inputDay === yesterday.getDate() &&
                inputMonth === yesterday.getMonth() + 1 &&
                inputYear === yesterday.getFullYear()
            ) {
                return { time, date: "Yesterday" };
            }

            // Otherwise, return in DD-MM-YYYY format
            let date = `${String(inputDay).padStart(2, '0')}-${String(inputMonth).padStart(2, '0')}-${inputYear}`;

            return { time, date };

        };

        // //fetch latest
        async function fetch_latest() {
            for (receiver of chatBoxes) {
               
                active_receiver_id=receiver.childNodes[3].childNodes[1].childNodes[1].innerText.trim().toLowerCase();
                let sorted = await sortChats();
                // console.log(sorted[sorted.length-1].classList[1]);
                
                let time =sorted[sorted.length - 1].children[1].innerText.trim().toString();
                // console.log(time);
                receiver.querySelector("#time").innerText = formatTimestamp(time);

                if (sorted[sorted.length - 1].classList[1].toString() == "sent") {
                    receiver.querySelector("#recent-chat").innerText = "You: " + sorted[sorted.length - 1].children[0].innerText.toString();
                } else {
                    receiver.querySelector("#recent-chat").innerText = sorted[sorted.length - 1].children[0].innerText.toString();
                }
            }
            active_receiver_id="";
        };
        document.addEventListener("DOMContentLoaded", async() => {
            await fetch_latest();
            await activateChatBoxes();
        });

        //when a user is chatting with any online receiver,
        //  and if he goes offline, then udate the receiver status dynamically
        function checkConnection(){
            if(!onlineUsers.includes(active_receiver_id) && receiver_status.innerText.trim()=="online"){
                receiver_status.innerText = "offline";
            }
            else if(onlineUsers.includes(active_receiver_id) && receiver_status.innerText=="offline"){
                receiver_status.innerText = "online";
            }
        }
        
        async function insertChatMsgs(receiver_id,receiver_name){
            if (onlineUsers.includes(receiver_id,receiver_name)) {
                // console.log("updated this chatbox's receiver status")
                receiver_status.innerText = "online";
            }
            else{
                receiver_status.innerText = "offline";
            }
            let sortedMsgs2=[];
            // await  console.log("sortedMsgs2",sortedMsgs2);
            sortedMsgs2 =await sortChats();
            // .then(async()=>{
                sortedMsgs2=[...sortedMsgs2];
            // console.log("sortedMsgs2",sortedMsgs2);
            //add time stamps
            let prev ="";
            if(sortedMsgs2.length!=0){
            prev = addTimeStampsInChats(sortedMsgs2[sortedMsgs2.length - 1].querySelector(".chattingbox-chat-time").textContent.trim().toString()).date;
            for (i = sortedMsgs2.length - 1; i >= 0; i--) {
                let present = addTimeStampsInChats(sortedMsgs2[i].querySelector(".chattingbox-chat-time").textContent.trim().toString()).date;
                if (prev == present) {//move up
                    if (i == 0) {
                        //insert at index '0'
                        // console.log(prev,sortedMsgs2[0].querySelector(".chattingbox-chat-time").textContent.trim());
                        sortedMsgs2[i].querySelector(".chattingbox-chat-time").innerText = addTimeStampsInChats(sortedMsgs2[i].querySelector(".chattingbox-chat-time").textContent.trim()).time;
                        let date = document.createElement("div");
                        date.className = "messageTimeStamp";
                        date.innerText = prev;
                        
                        sortedMsgs2.splice(0, 0, date);
                        break;
                    }
                }
                else {
                    let date = document.createElement("div");
                    date.className = "messageTimeStamp";
                    date.innerText = prev;
                    prev = present;
                    sortedMsgs2.splice(i + 1, 0, date);
                }
                sortedMsgs2[i].querySelector(".chattingbox-chat-time").innerText = addTimeStampsInChats(sortedMsgs2[i].querySelector(".chattingbox-chat-time").textContent.trim()).time;
            }}
            let chatBox = document.querySelector("#chatBox");
            chatBox.innerHTML = "";
            // console.log("added Time Stamps:",sortedMsgs2);
            if(sortedMsgs.length!=0 && sortedMsgs2[0].className!="messageTimeStamp"){
                let date = document.createElement("div");
                        date.className = "messageTimeStamp";
                        date.innerText = prev;
                        sortedMsgs2.splice(0, 0, date);
            }
            await sortedMsgs2.forEach(msg => chatBox.appendChild(msg));
            emptyContainer.style.display = "none";
            chatContainer.style.display = "flex";
            // console.log(sortedMsgs2[0]);
            
            await chatBox.scrollTo({ top: chatBox.scrollHeight });
            // console.log("sortedMsgs2",sortedMsgs2,"sortedMsgs",sortedMsgs);
            //end
        // });
            }
        
        const rightClickMenu = document.getElementById('rightClickMenu');
        // const deleteForSender=rightClickMenu.querySelector("#deleteForSender");
        const deleteForBoth=rightClickMenu.querySelector("#deleteForBoth");
        let msgToDelete="";let delMsgId="";let delMsgIdx=-1;
        
        // deleteForSender.addEventListener('click', async() => {
            
        //     const response = await fetch("/api/deleteMsg", {
        //         method: "POST",
        //         headers: { "Content-Type": "application/json" },
        //         body: JSON.stringify({sender:loggedIn,receiver:active_receiver_id,msgStatus:msgStatus})
        //     });
        //     // const result = await response.json();
        //     //   alert("Do u Want to Delete This Message For U?");
        //   rightClickMenu.style.display = 'none';
        //   msgStatus="";
        // });
        
        socket.on("delMsg",async(delAtIdx)=>{
            let allMsgs=document.querySelectorAll(".received");
            Array.from(allMsgs)[delAtIdx].innerHTML="<i style='color:grey'>This Message Was deleted</i>";
        });
        
        document.addEventListener('click', (e) => {
          if (!rightClickMenu.contains(e.target)) {
            rightClickMenu.style.display = 'none';
            msgToDelete="";delMsgId="";delMsgIdx=-1;
          }
        });
        document.addEventListener("DOMContentLoaded",async()=>{

            await activateChatBoxes();
            // setTimeout(async()=>{console.log(await sortChats())},5000);
        });
        function applyDeleteEventListenerOnMsgs(){
            const messages = document.querySelectorAll(".message");
            //ye pura message ka event listener send Btn ke andar modify karke dalna padta aur
            messages.forEach((msg)=>{
                // console.log(msg);
                if(msg.classList.contains("sent")){
                    msg.addEventListener("contextmenu", (e) => {
                        let idx=-1;let target="";
                        msgToDelete=msg;
                        for(let j=0;j<messages.length;j++){
                            if(messages[j].classList.contains("sent")){
                                idx++;
                                delMsgIdx=idx;
                            }
                            if(messages[j]==msg){break;}
                        }
                        
                        // console.log("updated msg index before deleting : ", delMsgIdx);
                        // console.log(sentMsgsObj[idx]["_id"]);
                        delMsgId=sentMsgsObj[idx]["_id"].toString();
                        // console.log(sortedMsgs.indexOf(msg));
                        msgStatus="sent";
                        e.preventDefault();
                        rightClickMenu.style.display = 'block';
                        // rightClickMenu.querySelector("#deleteForBoth").style.display="block";
                        rightClickMenu.style.left = `${e.pageX-300}px`;
                        rightClickMenu.style.top = `${e.pageY}px`;
                    });
                }
                // else if(msg.classList.contains("received")){
                    
                //     msg.addEventListener("contextmenu", (e) => {
                //         console.log(receivedMsgsObj);
                //         // console.log(sortedMsgs.indexOf(msg));
                        
                //         msgStatus="received";
                //         e.preventDefault();
                //         rightClickMenu.style.display = 'block';
                //         rightClickMenu.querySelector("#deleteForBoth").style.display="none";
                //         rightClickMenu.style.left = `${e.pageX+20}px`;
                //         rightClickMenu.style.top = `${e.pageY}px`;
                //     });
                // }
            });
            
            deleteForBoth.addEventListener('click', async() => {
                // console.log(delMsgIdx,msgToDelete);
                msgToDelete.innerHTML="<i  style='color:grey'>You Deleted This Message</i>";
                const response = await fetch("/api/deleteMsg", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({sender:loggedIn,msgId:delMsgId }),
                });
                const result = await response.json();
                //   alert("Do u Want to Delete This Message For Both?");
                // console.log(receiver_status.innerText);
                if(receiver_status.innerText.trim()=="online"){
                    socket.emit("deleteMsgForBoth",{receiverId:active_receiver_id,delAtIdx:delMsgIdx});
            }
            
            rightClickMenu.style.display = 'none';
            msgToDelete="";delMsgId="";
            });
        }
        async function activateChatBoxes(){
            chatBoxes.forEach(chatbox => {
                chatbox.addEventListener("mouseover", function () {
                this.style.background = "#e9ecef"; // Light gray on hover
                });
                chatbox.addEventListener("mouseout", function () {
                this.style.background = ""; // Reset background on hover out
                });
                chatbox.addEventListener("mousedown", function () {
                this.style.background = "#d6d8db";

                });
                chatbox.addEventListener("mouseup", function () {
                this.style.background = "#e9ecef"; // Back to hover color after release
                });
            
                chatbox.addEventListener("click", async function () {
                    // console.log("clicked chatbox",chatbox.querySelector("#to_id").innerText.trim().toLowerCase());
                    receiver_name.innerText = chatbox.querySelector("#name").innerText.trim();
                    receiver_id.innerText = chatbox.querySelector("#to_id").innerText.trim().toLowerCase();
                    active_receiver_id= receiver_id.innerText;
                    await insertChatMsgs(receiver_id.innerText,receiver_name.innerText);
                    // const messages =document.querySelectorAll(".message");
                    // console.log(messages);
                    applyDeleteEventListenerOnMsgs();
                    messageInput.value = ""; messageInput.dispatchEvent(new Event('input'));
                    
                });
                
                // chatbox.addEventListener("contextmenu", (e) => {
                //     e.preventDefault();
                //     rightClickMenu.style.display = 'block';
                //     rightClickMenu.style.left = `${e.pageX}px`;
                //     rightClickMenu.style.top = `${e.pageY}px`;
                // });
                
            });
        }
        
        function toggleEmojiPicker() {
            let dropdown = document.getElementById("emojiDropdown");
            dropdown.style.display = (dropdown.style.display === "block") ? "none" : "block";
        }
        function addEmoji(emoji) {
            let inputField = document.getElementById("messageInput");
            inputField.value += emoji; // Emoji append karega
            inputField.focus(); // Input field active karega
            inputField.dispatchEvent(new Event("input", { bubbles: true })); // Send button toggle karega

            let emojiDropdown = document.getElementById("emojiDropdown");
            if (emojiDropdown.style.display !== "none") {
                emojiDropdown.style.display = "none"; // Dropdown close karega
            }
        }
        
        let sendBtn = document.querySelector("#sendBtn");
        let voiceBtn = document.querySelector("#voiceBtn");
        sendBtn.style.display = "none";
        messageInput.addEventListener("input", function () {
            if (messageInput.value.trim() !== "") {
                sendBtn.style.display = "inline"; // Send button show
                voiceBtn.style.display = "none";
            } else {
                sendBtn.style.display = "none";
                voiceBtn.style.display = "inline";
            }
        });
        
        async function sendMsg(message){
            try {
                const toId = document.querySelector("#receiver-id").textContent.trim();
                const fromId = loggedIn;
                const response = await fetch("/api/sendMessage", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ from_id: fromId, message, to_id: toId }), // Send the message and to_id
                });
                const result = await response.json();
                if(onlineUsers.includes(toId)){
                    //display dynamically the message in the online receiver's chatbox
                    socket.emit("sendMessage",{fromId:fromId,msg:message,toId:toId,at:result.message.at});
                }
                // await console.log(result.message.message);
                let chatBox = document.querySelector("#chatBox");
                let p = document.createElement("p");
                p.innerText = result.message.message;
                let time = document.createElement("div");
                time.className = "chattingbox-chat-time";
                time.innerText = addTimeStampsInChats(result.message.at).time;
                let msg = document.createElement("div");
                msg.className = "message sent";
                msg.appendChild(p);
                msg.appendChild(time);
                sortedMsgs=await sortChats();
                // console.log("Sorted Msgs on Clicking Send Btn : ",sortedMsgs);
                if(sortedMsgs.length-1!=0){//means previous sortedMsgs.length != 0, means sender had chatted with the receiver before also
                    // console.log(addTimeStampsInChats(sortedMsgs[sortedMsgs.length - 2].querySelector(".chattingbox-chat-time").innerText).date,addTimeStampsInChats(result.message.at).date);
                    // console.log(addTimeStampsInChats(sortedMsgs[sortedMsgs.length - 1].querySelector(".chattingbox-chat-time").innerText).date == addTimeStampsInChats(result.message.at).date);
                    if(sortedMsgs.length>1){
                        if (addTimeStampsInChats(sortedMsgs[sortedMsgs.length - 2].querySelector(".chattingbox-chat-time").innerText).date != addTimeStampsInChats(result.message.at).date) {
                            //message today after some day(s)
                            let date = document.createElement("div");
                            date.className = "messageTimeStamp";
                            date.innerText = "Today";
                            chatBox.appendChild(date);
                            chatBox.appendChild(msg);
                        }
                        else if(addTimeStampsInChats(sortedMsgs[sortedMsgs.length - 2].querySelector(".chattingbox-chat-time").innerText).date == addTimeStampsInChats(result.message.at).date){
                            //today's next message (not First!)
                            chatBox.appendChild(msg);//on sender's system

                    }}else if(sortedMsgs.length==1){
                        //the recently sent message is the first message with the receiver!
                        let date = document.createElement("div");
                        date.className = "messageTimeStamp";
                        date.innerText = "Today";
                        chatBox.appendChild(date);
                        chatBox.appendChild(msg);
                    }
            }
                else{
                    let date = document.createElement("div");
                    date.className = "messageTimeStamp";
                    date.innerText = "Today";
                    chatBox.appendChild(date);
                    chatBox.appendChild(msg);
                }
                
                msg.addEventListener("contextmenu", (e) => {
                    let idx=-1;let target="";
                    msgToDelete=msg;
                    for(let j=0;j<sortedMsgs.length;j++){
                        if(sortedMsgs[j].classList.contains("sent")){
                        idx++;
                        delMsgIdx=idx;
                    }
                    }
                    // console.log("updated msg index before deleting : ", delMsgIdx);
                    // console.log(sentMsgsObj[idx]["_id"]);
                    // console.log(sentMsgsObj,sentMsgsObj[idx],sentMsgsObj[idx]["_id"]);
                    delMsgId=sentMsgsObj[idx]["_id"].toString();
                    // console.log(sortedMsgs.indexOf(msg));
                    msgStatus="sent";
                    e.preventDefault();
                    rightClickMenu.style.display = 'block';
                    // rightClickMenu.querySelector("#deleteForBoth").style.display="block";
                    rightClickMenu.style.left = `${e.pageX-300}px`;
                    rightClickMenu.style.top = `${e.pageY}px`;
                });
                chatBox.scrollTo({ top: chatBox.scrollHeight, behavior: "smooth" });
                messageInput.value = ""; messageInput.dispatchEvent(new Event('input'));
            }
            catch (error) {
                console.error("Error sending message:", error); // Debugging output
            }
        }
        
        loggedIn = loggedIn.toString();
        sendBtn.addEventListener("click", async () => {
            const message = messageInput.value.trim(); // Trim whitespace
            if (!message) {
                console.error("Message is empty!"); // Debugging output
                return; // Stop if the message is empty
            }
            await sendMsg(message);
            // try {
            //     const toId = document.querySelector("#receiver-id").textContent.trim();
            //     const fromId = loggedIn;
            //     const response = await fetch("/api/sendMessage", {
            //         method: "POST",
            //         headers: { "Content-Type": "application/json" },
            //         body: JSON.stringify({ from_id: fromId, message, to_id: toId }), // Send the message and to_id
            //     });
            //     const result = await response.json();
            //     if(onlineUsers.includes(toId)){
            //         //display dynamically the message in the online receiver's chatbox
            //         socket.emit("sendMessage",{fromId:fromId,msg:message,toId:toId,at:result.message.at});
            //     }
            //     // await console.log(result.message.message);
            //     let chatBox = document.querySelector("#chatBox");
            //     let p = document.createElement("p");
            //     p.innerText = result.message.message;
            //     let time = document.createElement("div");
            //     time.className = "chattingbox-chat-time";
            //     time.innerText = addTimeStampsInChats(result.message.at).time;
            //     let msg = document.createElement("div");
            //     msg.className = "message sent";
            //     msg.appendChild(p);
            //     msg.appendChild(time);
            //     sortedMsgs=await sortChats();
            //     // console.log("Sorted Msgs on Clicking Send Btn : ",sortedMsgs);
            //     if(sortedMsgs.length-1!=0){//means previous sortedMsgs.length != 0, means sender had chatted with the receiver before also
            //         // console.log(addTimeStampsInChats(sortedMsgs[sortedMsgs.length - 2].querySelector(".chattingbox-chat-time").innerText).date,addTimeStampsInChats(result.message.at).date);
            //         // console.log(addTimeStampsInChats(sortedMsgs[sortedMsgs.length - 1].querySelector(".chattingbox-chat-time").innerText).date == addTimeStampsInChats(result.message.at).date);
            //         if(sortedMsgs.length>1){
            //             if (addTimeStampsInChats(sortedMsgs[sortedMsgs.length - 2].querySelector(".chattingbox-chat-time").innerText).date != addTimeStampsInChats(result.message.at).date) {
            //                 //message today after some day(s)
            //                 let date = document.createElement("div");
            //                 date.className = "messageTimeStamp";
            //                 date.innerText = "Today";
            //                 chatBox.appendChild(date);
            //                 chatBox.appendChild(msg);
            //             }
            //             else if(addTimeStampsInChats(sortedMsgs[sortedMsgs.length - 2].querySelector(".chattingbox-chat-time").innerText).date == addTimeStampsInChats(result.message.at).date){
            //                 //today's next message (not First!)
            //                 chatBox.appendChild(msg);//on sender's system

            //         }}else if(sortedMsgs.length==1){
            //             //the recently sent message is the first message with the receiver!
            //             let date = document.createElement("div");
            //             date.className = "messageTimeStamp";
            //             date.innerText = "Today";
            //             chatBox.appendChild(date);
            //             chatBox.appendChild(msg);
            //         }
            // }
            //     else{
            //         let date = document.createElement("div");
            //         date.className = "messageTimeStamp";
            //         date.innerText = "Today";
            //         chatBox.appendChild(date);
            //         chatBox.appendChild(msg);
            //     }
                
            //     msg.addEventListener("contextmenu", (e) => {
            //         let idx=-1;let target="";
            //         msgToDelete=msg;
            //         for(let j=0;j<sortedMsgs.length;j++){
            //             if(sortedMsgs[j].classList.contains("sent")){
            //             idx++;
            //             delMsgIdx=idx;
            //         }
            //         }
            //         // console.log("updated msg index before deleting : ", delMsgIdx);
            //         // console.log(sentMsgsObj[idx]["_id"]);
            //         // console.log(sentMsgsObj,sentMsgsObj[idx],sentMsgsObj[idx]["_id"]);
            //         delMsgId=sentMsgsObj[idx]["_id"].toString();
            //         // console.log(sortedMsgs.indexOf(msg));
            //         msgStatus="sent";
            //         e.preventDefault();
            //         rightClickMenu.style.display = 'block';
            //         // rightClickMenu.querySelector("#deleteForBoth").style.display="block";
            //         rightClickMenu.style.left = `${e.pageX-300}px`;
            //         rightClickMenu.style.top = `${e.pageY}px`;
            //     });
            //     chatBox.scrollTo({ top: chatBox.scrollHeight, behavior: "smooth" });
            //     messageInput.value = ""; messageInput.dispatchEvent(new Event('input'));
            // }
            // catch (error) {
            //     console.error("Error sending message:", error); // Debugging output
            // }
        });

        messageInput.addEventListener("keypress", function (event) {
            if (event.key === "Enter" && messageInput.value != "") {// Prevent form submission (if inside a form)
                document.getElementById("sendBtn").click(); // Trigger button click
            }
        });
    
        socket.on("receiveMessage", async ({msg,fromId,at})=>{
            if(fromId==active_receiver_id){
                sortedMsgs = await sortChats();
                // console.log(sortedMsgs);
                let p = document.createElement("p");
                    p.innerText = msg.toString();
                    let time = document.createElement("div");
                    time.className = "chattingbox-chat-time";
                    time.innerText =addTimeStampsInChats(at).time;
                    let message = document.createElement("div");
                    message.className = "message received recentlyReceived";
                    message.appendChild(p);
                    message.appendChild(time);
                    
                    // console.log("last message was : ",addTimeStampsInChats(sortedMsgs[sortedMsgs.length - 2].querySelector(".chattingbox-chat-time").innerText).date);
                    // console.log(sortedMsgs[sortedMsgs.length - 2].querySelector(".chattingbox-chat-time").innerText);

                if(sortedMsgs.length-1==0 || (sortedMsgs.length!=0 && addTimeStampsInChats(sortedMsgs[sortedMsgs.length - 2].querySelector(".chattingbox-chat-time").innerText).date != addTimeStampsInChats(at).date)){
                    let date = document.createElement("div");
                    date.className = "messageTimeStamp";
                    date.innerText = "Today";
                    chatBox.appendChild(date);
                    chatBox.appendChild(message);
                    
                }
                // // // if[addTimeStampsInChats(sortedMsgs[sortedMsgs.length - 1].querySelector(".chattingbox-chat-time").innerText).date = addTimeStampsInChats(at).date]
                else{
                    //because today sender have messaged this receiver before also!
                    chatBox.appendChild(message);
                }
                chatBox.scrollTo({ top: chatBox.scrollHeight, behavior: "smooth" });
            }
        });

    </script>
</body>
</html>